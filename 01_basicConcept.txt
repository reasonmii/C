1989 미국 표준 : American National Standards Institute (ANSI) C89
1990 세계 표준 : International Organization for Standardization (ISO) C90

The Spirit of C
프로그래머를 믿어라
프로그래머가 필요한 일을 하는 것을 방해하지 마라
언어를 작고 단순하게 유지해라
한 연산을 할 때 단 한 가지 방법만 제공해라
호환을 보장할 수 없다 하더라도 속도를 빠르게 해라

ANSI/ISO C9X Committee
국제적인 문자 집합 추가
64비트 프로세서 대응
과학 공학 수치 계산 적합도 개선 (FORTRAN 대체)
언어를 단순하게 유지
"커미티는 C가 아니라 C++이 크고 야심찬 언어가 되는 것을 허용하는 것에 동의했다"

소프트웨어 개발의 7단계
- 목적을 정의한다
- 프로그램을 설계한다
- 코드를 작성한다
- 컴파일 한다
- 실행시켜본다
- 시험해 보고 오류가 있다면 수정한다
- 프로그램을 유지하고 개선해 나간다

프로그래밍 과정
소스코드 입력
→ 문서 편집기
→ 소스 코드 Source code
→ 컴파일러 Compiler (+링커 Linker)
→ 실행 파일 Executable (.exe)
→ 프로그램 실행

=====================================================================================

부호가 있는 정수 (signed)
첫 비트가 부호를 표시 : 1이면 음수, 0이면 양수
8비트 정수의 범위
1) 10000000 ~ 01111111 (2진수)
2) -128 ~ 127 (10진수)
→ 표현 가능한 숫자 개수 : 256가지

ex1) -5를 2의 보수로 표현 (10진수)
- 5를 2진수로 : 0000 0101
- 보수 complement : 1111 1010
- 더하기 1 : 1111 1011
  이때 제일 첫 번째 1은 음수 의미

ex2) 0을 음수로 변환
- 0을 2진수로 : 0000 0000
- 보수 complement : 1111 1111
- 더하기 1 : 0000 0000
  즉, 2의 보수 정수 표현법에서 -0과 0은 같음

ex3) 음수를 10진수로 변환 : 1001 1110
- 첫 번째 값이 1이니까 음수
- 보수 complement : 0110 0001
- 더하기 1 : 0110 0010
- 1 * 64 + 1 * 32 + 2 = 98
- 결과 : -98

=====================================================================================

부호가 없는 정수 (unsigned)
8비트 정수의 범위
1) 00000000 ~ 11111111 (2진수)
2) 0 ~ 255 (10진수)
→ 표현 가능한 숫자 개수 : 256가지

=====================================================================================

정수형 short, int, long
실수형 : double, float
문자형 : char

형식지정자
%d : 10진 정수 출력
%f : float 형 실수 출력
%lf : double 형 실수 출력
%c : 문자 출력
%s : 문자열 출력

=====================================================================================

제어문자 Escape Sequence
\0 : Null 문자 - 문자열의 끝
\n : 줄바꿈 - 다음 라인의 시작 위치로 커서 이동
\t : horizontal tab - 다음 탭 위치로 커서 이동
\v : vertical tab - 설정되어 있는 다음 수직 탭 위치로 커서 이동
\b : backspace - 커서를 한 글자 뒤로 옮김
\r : carriage return : 커서를 현재 라인 시작 위치로 옮김
\f : form feed - 주로 프린터에서 강제적으로 다음 페이지로 넘길 때 사용
\a : 경고 (bell) - "삐" 하는 경고음 발생
\' : 원래의 작은 따옴표 출력
\" : 원래의 큰 따옴표 출력
\\ : 원래의 역슬래시 출력

=====================================================================================

에러
overflow : 숫자가 너무 커서 발생
underflow : 숫자가 너무 작아서 발생

=====================================================================================

수식 Expression
대입 = : 오른쪽을 왼쪽에 대입
산술 + - * / % : 사칙연산과 나머지 연산
부호 + -
조건 ? : 조건에 따라 선택
콤마 , : 콤마로 연결된 피연산자들을 순차적으로 실행
sizeof 연산자 : 자료형이나 변수의 크기를 바이트 단위로 반환
형반환 (type) : 변수나 상수의 자료형을 변환
포인터 연산자 * & [] : 주소계산, 포인터가 가리키는 곳의 내용 추출
구조체 연산자 . -> : 구조체의 멤버 참조

증감 연산자
전위 연산자 ++x, --x : 수식의 값은 증가/감소된 x값
후위 연산자 x++, x-- : 수식의 값은 증가/감소 전 x값

관계 연산자
x == y : x와 y가 같은가?
x != y : x와 y가 다른가?
x > y : x가 y보다 큰가?
x < y : x가 y보다 작은가?
x >= y : x가 y보다 크거나 같은가?
x <= y : x가 y보다 작거나 같은가?

논리 연산자
x && y : AND - x와 y 모두 참이면 참
x || y : OR - x와 y 둘 중 하나만 참이면 참
!x : NOT - x가 참이면 거짓, 거짓이면 참

비트 단위 연산자
& 비트 AND : 두 개의 피연산자의 해당 비트가 모두 1이면 1 아니면 0
| 비트 OR : 두 개의 피연산자의 해당 비트 중 하나만 1이면 1
^ 비트 XOR : 두 개의 피연산자의 해당 비트의 값이 같으면 0, 아니면 1
<< 왼쪽으로 이동 : 지정된 개수만큼 비트를 왼쪽으로 이동
>> 오른쪽으로 이동 : 지정된 개수만큼 비트를 오른쪽으로 이동
~ 비트 NOT : 0은 1로 만들고 1은 0으로 만듦

